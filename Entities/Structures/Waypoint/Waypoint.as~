//trap block script for devious builders

#include "Hitters.as"
#include "MapFlags.as"

int openRecursion = 0;

void onInit(CBlob@ this){
	this.getShape().SetRotationsAllowed( false );
    this.getSprite().getConsts().accurateLighting = true;
    //this.set_bool("open", false);    
    this.Tag("place norotate");

	this.addCommandID("enable switch");

	this.Tag("enabled");
    
	
	this.getCurrentScript().runFlags |= Script::tick_not_attached;	 
}


void onInit(CSprite@ this){
	this.animation.frame = 0;
}


void GetButtonsFor(CBlob@ this, CBlob@ caller){
	CBitStream params;
	params.write_u16( caller.getNetworkID() );
	if(this.getTeamNum() == caller.getTeamNum() && this.getShape().isStatic()){
		string description = this.hasTag("enabled") ? "Disable waypoint" : "Enable waypoint";
		CButton@ button = caller.CreateGenericButton(2, Vec2f_zero, this, this.getCommandID("enable switch"), description, params);
	}
	
}

void onCommand(CBlob @this, u8 cmd, CBitStream @params){
	CSprite@ sprite = this.getSprite();
	if( cmd == this.getCommandID("enable switch")){
		if(this.hasTag("enabled")){
			sprite.animation.frame = 1;
			this.Untag("enabled");
		}
		else{
			sprite.animation.frame = 0;
			this.Tag("enabled");
		}
	}
}

bool doesCollideWithBlob( CBlob@ this, CBlob@ blob )
{
	if(blob.getName() == "arrow" && blob.getTeamNum() != this.getTeamNum())
		return true;
	return false;
}


bool canBePickedUp( CBlob@ this, CBlob@ byBlob )
{
    return false;
}

